// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Red_Folder.Tests.Acceptance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PageStatusFeature : Xunit.IClassFixture<PageStatusFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PageStatus.feature"
#line hidden
        
        public PageStatusFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PageStatus", "\tIn order to avoid accidentally removing pages\r\n\tAs a site owner\r\n\tI want to ensu" +
                    "re that pages are in a known state", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(PageStatusFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the homepage is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the homepage is valid")]
        public virtual void GoingToTheHomepageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the homepage is valid", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I access /", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Services page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Services page is valid")]
        public virtual void GoingToTheServicesPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Services page is valid", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I access /Services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Projects page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Projects page is valid")]
        public virtual void GoingToTheProjectsPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Projects page is valid", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I access /Projects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the ROI page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the ROI page is valid")]
        public virtual void GoingToTheROIPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the ROI page is valid", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I access /Projects/ROI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the AspNetCore page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the AspNetCore page is valid")]
        public virtual void GoingToTheAspNetCorePageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the AspNetCore page is valid", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I access /Projects/AspNetCore", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Microservices page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Microservices page is valid")]
        public virtual void GoingToTheMicroservicesPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Microservices page is valid", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I access /Projects/Microservices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova page is valid")]
        public virtual void GoingToTheCordovaPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova page is valid", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I access /Projects/Cordova", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova Background Service Plugin page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova Background Service Plugin page is valid")]
        public virtual void GoingToTheCordovaBackgroundServicePluginPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova Background Service Plugin page is valid", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I access /Projects/Cordova/BackgroundServicePlugin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova GPS Service Plugin page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova GPS Service Plugin page is valid")]
        public virtual void GoingToTheCordovaGPSServicePluginPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova GPS Service Plugin page is valid", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I access /Projects/Cordova/GPSServicePlugin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova Scheduler Plugin page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova Scheduler Plugin page is valid")]
        public virtual void GoingToTheCordovaSchedulerPluginPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova Scheduler Plugin page is valid", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I access /Projects/Cordova/SchedulerPlugin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova Availability Monitor Plugin page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova Availability Monitor Plugin page is valid")]
        public virtual void GoingToTheCordovaAvailabilityMonitorPluginPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova Availability Monitor Plugin page is valid", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I access /Projects/Cordova/AvailabilityMonitorPlugin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova SMS Handler Plugin page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova SMS Handler Plugin page is valid")]
        public virtual void GoingToTheCordovaSMSHandlerPluginPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova SMS Handler Plugin page is valid", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I access /Projects/Cordova/SMSHandlerPlugin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the MyBio page is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the MyBio page is valid")]
        public virtual void GoingToTheMyBioPageIsValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the MyBio page is valid", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("I access /MyBio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the legacy recentprojects page, we are redirected to the projects page")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the legacy recentprojects page, we are redirected to the projects page")]
        public virtual void GoingToTheLegacyRecentprojectsPageWeAreRedirectedToTheProjectsPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the legacy recentprojects page, we are redirected to the projects page", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I access /home/recentprojects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.Then("I should receive Permanent Redirect response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
 testRunner.And("location of /projects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the Cordova shortcut page is valid and we get correct cannonical", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the Cordova shortcut page is valid and we get correct cannonical")]
        public virtual void GoingToTheCordovaShortcutPageIsValidAndWeGetCorrectCannonical()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the Cordova shortcut page is valid and we get correct cannonical", new string[] {
                        "ignore"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("I access /cordova", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.Then("I should receive Ok response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("the cannonical is /projects/cordova", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the fake exception page will provide an error")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the fake exception page will provide an error")]
        public virtual void GoingToTheFakeExceptionPageWillProvideAnError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the fake exception page will provide an error", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I access /home/throw", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.Then("I should receive Error response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Going to the non-existant page will provide a not found")]
        [Xunit.TraitAttribute("FeatureTitle", "PageStatus")]
        [Xunit.TraitAttribute("Description", "Going to the non-existant page will provide a not found")]
        public virtual void GoingToTheNon_ExistantPageWillProvideANotFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Going to the non-existant page will provide a not found", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("I access /home/idontexist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.Then("I should receive Not Found response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PageStatusFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PageStatusFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
